class DataSource < ApplicationRecord
  belongs_to  :project
  has_many    :hosts, dependent: :destroy
  # validates   :name, presence: true
  # validates_uniqueness_of :name, scope: [:project_id], case_sensitive: false

  def self.check_format(source)
    doc = Nokogiri::XML(source.data)

    # Nessus XML
    if !doc.xpath('./NessusClientData_v2').empty?
      DataSource.nessus_to_db(source)
    # Acunetix XML
    elsif !doc.xpath('./ScanGroup').empty?
      DataSource.acunetix_to_db(source)
    else
      return true
    end

  end

  def self.acunetix_to_db(source)
    doc = Nokogiri::XML(source.data)

    # Loop host element
    doc.xpath('./ScanGroup/Scan').each do |host|
      @host = source.hosts.new
      @raw_host = host.xpath('./StartURL').text
      @raw_host.gsub!('/','')
      @service_name, @url, @port = @raw_host.split(':')

      @host.ip = @url.strip
      @host.fqdn = @url.strip
      @host.netbios_name = ''
      @host.mac_address = ''
      @host.operating_system = host.xpath('./Os').text
      @host.platform = ''
      @host.cpe = ''
      @host.system_type = ''
      if !@host.save
        @host = Host.find_by_ip(@host.ip)
      end

      # Loop ReportItem element
      host.xpath('./ReportItems/ReportItem').each do |item|
        @vuln = @host.findings.new

        @vuln.port = @port.to_i
        @vuln.service_name = @service_name
        @vuln.protocol = 'tcp'

        @vuln.plugin_id = item.attributes['id'].value.to_i
        @vuln.affected_url = item.xpath('./Affects').text

        # convert severity level from string to integer
        case item.xpath('./Severity').text
        when 'critical'
          @vuln.severity = 4
        when 'high'
          @vuln.severity = 3
        when 'medium'
          @vuln.severity = 2
        when 'low'
          @vuln.severity = 1
        else
          @vuln.severity = 0
        end

        @vuln.category = item.xpath('./Type').text
        @vuln.name = item.xpath('./Name').text
        @vuln.family = 'Web Application'

        # @vuln.cpe = ''
        # @vuln.cve = item.xpath('./CVE').text
        @vuln.cwe = item.xpath('./CWE').map(&:text).join(",")
        # @vuln.cert = ''
        @vuln.cvss_base_score = item.xpath('./CVSS/Score').text.to_f
        @vuln.plugin_type = 'remote'
        @vuln.parameter = item.xpath('./Parameter').text.strip
        @vuln.synopsis = item.xpath('./Impact').text.strip
        @vuln.description = item.xpath('./Description').text.strip
        @vuln.solution = item.xpath('./Recommendation').text.strip

        @vuln.request = item.xpath('./TechnicalDetails/Request').text.strip
        @vuln.response = item.xpath('./TechnicalDetails/Response').text.strip

        @vuln.save
      end
    end
  end

  def self.nessus_to_db(source)
    doc = Nokogiri::XML(source.data)
    # Loop Report element
    doc.xpath('/NessusClientData_v2/Report').each do |report|
      # iterate host element in report
      report.xpath('./ReportHost').each do |host|
        @host = source.hosts.new
        host.xpath('./HostProperties/tag').each do |tag|
          if tag.attributes['name'].value == 'host-ip'
            @host.ip = tag.text.strip
          elsif tag.attributes['name'].value == 'host-fqdn'
            @host.fqdn = tag.text.strip
          elsif tag.attributes['name'].value == 'netbios-name'
            @host.netbios_name = tag.text.strip
          elsif tag.attributes['name'].value == 'mac-address'
            @host.mac_address = tag.text.strip
          elsif tag.attributes['name'].value == 'operating-system'
            @host.operating_system = tag.text.strip
          elsif tag.attributes['name'].value == 'os'
            @host.platform = tag.text.strip
          elsif tag.attributes['name'].value == 'cpe'
            @host.cpe = tag.text.strip
          elsif tag.attributes['name'].value == 'system-type'
            @host.system_type = tag.text.strip
          end
        end
        if !@host.save
          # byebug
          @host = Host.find_by_ip(@host.ip)
        end

        # Loop ReportItem element for each host
        host.xpath('./ReportItem').each do |item|
          @vuln = @host.findings.new

          @vuln.service_name = item.attributes['svc_name'].value.strip
          @vuln.port = item.attributes['port'].value.to_i

          @vuln.protocol = item.attributes['protocol'].value
          @vuln.severity = item.attributes['severity'].value.to_i
          @vuln.plugin_id = item.attributes['pluginID'].value.to_i
          @vuln.name = item.attributes['pluginName'].value
          @vuln.family = item.attributes['pluginFamily'].value

          @vuln.cpe = item.xpath('./cpe').map(&:text).join(",")
          @vuln.cve = item.xpath('./cve').map(&:text).join(",")
          @vuln.cwe = item.xpath('./cwe').map(&:text).join(",")
          @vuln.cert = item.xpath('./cert').text.strip
          @vuln.cvss_base_score = item.xpath('./cvss_base_score').text.to_f

          @vuln.publish_date = item.xpath('./vuln_publication_date').text
          @vuln.patch_date = item.xpath('./patch_publication_date').text

          @vuln.exploit_available = (item.xpath('./exploit_available').text == "true")? 'true' : 'false'
          @vuln.metasploit_name = item.xpath('./metasploit_name').text

          @vuln.plugin_type = item.xpath('./plugin_type').text
          @vuln.description = item.xpath('./description').text.strip
          @vuln.synopsis = item.xpath('./synopsis').text
          @vuln.solution = item.xpath('./solution').text.strip
          @vuln.response = item.xpath('./plugin_output').text.strip
          @vuln.see_also = item.xpath('./see-also').text.strip
          @vuln.xref = item.xpath('./xref').map(&:text).join(",")
          @vuln.save
        end
      end
    end
  end

end
