class FindingsController < ApplicationController

  before_action :set_finding, only: [:copy, :show, :edit, :update, :destroy]
  before_action :set_project, only: [:search]
  before_action :set_host, only: [:index, :new]

  def enable
    @finding = Finding.find(params[:finding_id])
    @finding.update(enable: true)
  end

  def disable
    @finding = Finding.find(params[:finding_id])
    @finding.update(enable: false)
  end

  def select_host
    @finding = Finding.find(params[:id])
    respond_to do |format|
      format.html
    end
  end

  def search
    @hosts = Host.where(data_source_id: @project.data_source_ids)
    if params[:search].present?
      @findings = Finding.where(host_id: @hosts).where('name ILIKE ?', "%#{params[:search]}%").order("severity DESC").order('name ASC').order('id ASC').paginate(page: params[:page], per_page: 10)
    elsif params[:field_type].present? && params[:field_type] == 'exploitable'
      @findings = Finding.where(host_id: @hosts, exploitable: true).order("severity DESC").order('name ASC').order('id ASC').paginate(page: params[:page], per_page: 10)
    elsif params[:field_type].present? && params[:field_type] == 'service_name'
      @findings = Finding.where(host_id: @hosts).where('service_name = ?', params[:field_value]).order("severity DESC").order('name ASC').order('id ASC').paginate(page: params[:page], per_page: 10)
    elsif params[:severity].present?
      @findings = Finding.where(host_id: @hosts, severity: params[:severity]).order("name ASC").order('name ASC').order('id ASC').paginate(page: params[:page], per_page: 10)
    else
      @findings = Finding.where(host_id: @hosts).order("severity DESC").order('name ASC').order('id ASC').paginate(page: params[:page], per_page: 10)
    end
  end

  # GET /findings
  # GET /findings.json
  def index
    if params[:host_id]
      @findings = @host.findings.order('severity DESC').order('name ASC').order('id ASC').paginate(page: params[:page], per_page: 10)
    else
      @findings = Finding.order('severity DESC').order('name ASC').order('id ASC').paginate(page: params[:page], per_page: 10)
    end
  end

  # GET /findings/1
  # GET /findings/1.json
  def show
  end

  # GET /findings/new
  def new
    @finding = @host.findings.new
  end

  def copy
    @finding = Finding.new(@finding.attributes)
  end
  # GET /findings/1/edit
  def edit
  end

  # POST /findings
  # POST /findings.json
  def create
    @host = Host.find(params[:finding][:host_id])
    @finding = @host.findings.new(finding_params)

    respond_to do |format|
      if @finding.save
        format.html { redirect_to host_findings_path(@finding.host_id), notice: 'Finding was successfully created.' }
        format.json { render :show, status: :created, location: @finding }
      else
        format.html { render :new }
        format.json { render json: @finding.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /findings/1
  # PATCH/PUT /findings/1.json
  def update
    p params[:controller]

    respond_to do |format|
      if @finding.update(finding_params)
        format.html { redirect_to host_findings_path(@finding.host_id), notice: 'Finding was successfully updated.' }
        format.json { render :show, status: :ok, location: @finding }
      else
        format.html { render :edit }
        format.json { render json: @finding.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /findings/1
  # DELETE /findings/1.json
  def destroy
    @finding.destroy
    respond_to do |format|
      format.html { redirect_to host_findings_path(@finding.host_id), notice: 'Finding was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_finding
      @finding = Finding.find(params[:id]) if params[:id].present?
    end

    def set_project
      @project = Project.find(params[:project_id]) if params[:project_id].present?
    end

    def set_host
      @host = Host.find(params[:host_id]) if params[:host_id].present?
    end
    # Never trust parameters from the scary internet, only allow the white list through.
    def finding_params
      params.fetch(:finding, {}).permit(:name, :cpe, :cve, :cwe, :cvss_base_score,
        :publish_date, :patch_date, :exploit_available, :exploitable, :metasploit_name,
        :xref, :cert, :unsupported_by_vendor, :see_also, :port, :service_name,
        :protocol, :service_name, :protocol, :severity, :family, :plugin_type,
        :description, :synopsis, :solution, :output, :host_id, :image, :search,
        :enable, :category, :affected_url, :request, :response, :parameter, :comment, :project_id)
    end
end
