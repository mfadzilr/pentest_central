class HostsController < ApplicationController
  before_action :set_host, only: [:show, :edit, :update, :destroy]


  def enable
    @host = Host.find(params[:host_id])
    @host.update(enable: true)
  end

  def disable
    @host = Host.find(params[:host_id])
    @host.update(enable: false)
  end

  def select_data_source
    @host = Host.find(params[:id])
    respond_to do |format|
      format.html
    end
  end

  # def update_data_source
  #   @host = Host.find(params[:id])
  #   @host.update(host_params)
  # end

  def search
    @project = Project.find(params[:project_id])
    if params[:search].present?
      @hosts = Host.where(data_source_id: @project.data_source_ids).where('ip ILIKE ? OR fqdn ILIKE ? OR netbios_name ILIKE ?',
        "%#{params[:search]}%", "%#{params[:search]}%", "%#{params[:search]}%").paginate(page: params[:page], per_page: 10)
    else
      @hosts = Host.where(data_source_id: @project.data_source_ids).paginate(page: params[:page], per_page: 10)
    end
  end
  # GET /hosts
  # GET /hosts.json
  def index
    if params[:data_source_id].nil?
      @hosts = Host.all.paginate(page: params[:page], per_page: 10)
    else
      @data_source = DataSource.find(params[:data_source_id])
      if params[:search].present?
        @hosts = @data_source.hosts.where('ip ILIKE ? OR fqdn ILIKE ? OR netbios_name ILIKE ?',
          "%#{params[:search]}%", "%#{params[:search]}%", "%#{params[:search]}%").paginate(page: params[:page], per_page: 10)
      else
        @hosts = @data_source.hosts.paginate(page: params[:page], per_page: 10)
      end
    end

    # if params[:search]
    #   @affected_hosts = AffectedHost.where(source_file_id: @project_group.source_file_ids).where(
    #   'host_ip ILIKE ? OR host_fqdn ILIKE ? OR netbios_name ILIKE ?', "%#{params[:search]}%", "%#{params[:search]}%", "%#{params[:search]}%"
    #   ).paginate(page: params[:page], per_page: 10)
    # else
    #   @affected_hosts = AffectedHost.where(source_file_id: @project_group.source_file_ids).paginate(page: params[:page], per_page: 10)
    # end
  end

  # GET /hosts/1
  # GET /hosts/1.json
  def show
  end

  # GET /hosts/new
  def new
    @data_source = DataSource.find(params[:data_source_id])
    @host = @data_source.hosts.new
  end

  # GET /hosts/1/edit
  def edit
  end

  # POST /hosts
  # POST /hosts.json
  def create
    @host = Host.new(host_params)
    respond_to do |format|
      if @host.save
        format.html { redirect_to data_source_hosts_path(@host.data_source_id), notice: 'Host was successfully created.' }
        format.json { render :show, status: :created, location: @host }
      else
        format.html { render :new }
        format.json { render json: @host.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /hosts/1
  # PATCH/PUT /hosts/1.json
  def update
    respond_to do |format|
      if @host.update(host_params)
        format.html { redirect_to data_source_hosts_path(@host.data_source_id), notice: 'Host was successfully updated.' }
        format.json { render :show, status: :ok, location: @host }
      else
        format.html { render :edit }
        format.json { render json: @host.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /hosts/1
  # DELETE /hosts/1.json
  def destroy
    @host.destroy
    respond_to do |format|
      format.html { redirect_to data_source_hosts_path(@host.data_source_id), notice: 'Host was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_host
      @host = Host.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def host_params
      params.fetch(:host, {}).permit(:ip, :fqdn, :netbios_name, :mac_address, :cpe, :platform, :operating_system, :system_type, :data_source_id)
    end
end
